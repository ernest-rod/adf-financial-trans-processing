{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-financial-trans-processing"
		},
		"lnk_abls_axiomstorage4inbounddata_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://axiomstorage4inbounddata.blob.core.windows.net"
		},
		"lnk_adls_axiomstandardatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://axiomstandarddatalake.dfs.core.windows.net"
		},
		"trg_sevnt_axiomstorage4inbounddata_inbounddatafiles_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/b422d504-452d-4c32-86ff-df16b9c82ff1/resourceGroups/AxiomCore_StorageAccounts/providers/Microsoft.Storage/storageAccounts/axiomstorage4inbounddata"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_data_file_verification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check If File Exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_raw_transaction_data_file",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:10:00",
							"sleep": 10
						}
					},
					{
						"name": "Get Metadata from Transactions File",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Check If File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_transactions",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Column Count Matches",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata from Transactions File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Metadata from Transactions File').output.columnCount, 7)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Report Failure in Column Count",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@concat('Coulumn count failed: count is ', string( activity('Get Metadata from Transactions File').output.columnCount) )",
											"type": "Expression"
										},
										"errorCode": "100"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_raw_transaction_data_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_transactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_transaction_data_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move Transaction Data File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "transaction*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_csv_inbound_transaction_data_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_csv_raw_transaction_data_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Transaction Data File",
						"description": "Delete Transaction Data File from ingre location.",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Move Transaction Data File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_inbound_transaction_data_file_to_delete",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": "transaction*",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_inbound_transaction_data_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_raw_transaction_data_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_inbound_transaction_data_file_to_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_transaction_data_into_raw_zone')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Transaction Data File Into Raw Zone",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_csv_raw_transaction_data_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_raw_parquet_transaction_data_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_raw_transaction_data_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_raw_parquet_transaction_data_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_insert_raw_data_into_delta_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Insert Raw Transactions Into Delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_insert_raw_data_into_delta",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SRCParquetRawTransactions": {},
									"DSTStagingParquetRawTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Delta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_insert_raw_data_into_delta')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_inbound_transaction_data_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_abls_axiomstorage4inbounddata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inbounddatafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_abls_axiomstorage4inbounddata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_inbound_transaction_data_file_to_delete')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_abls_axiomstorage4inbounddata",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inbounddatafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_abls_axiomstorage4inbounddata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_raw_transaction_data_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_adls_axiomstandardatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "transactions.csv",
							"type": "Expression"
						},
						"folderPath": "transactions",
						"fileSystem": "textdatafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_adls_axiomstandardatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_transactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_adls_axiomstandardatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "transactions.csv",
						"folderPath": "transactions",
						"fileSystem": "textdatafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Original Description",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Transaction Type",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Account Name",
						"type": "String"
					},
					{
						"name": "Labels",
						"type": "String"
					},
					{
						"name": "Notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_adls_axiomstandardatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_parquet_transaction_data_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_adls_axiomstandardatalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingest"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trans_data.parquet",
						"folderPath": "transactions/raw",
						"fileSystem": "textdatafiles"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_adls_axiomstandardatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_abls_axiomstorage4inbounddata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Link Service to Azure Blob Storage Account: axiomstorage4inbounddata",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('lnk_abls_axiomstorage4inbounddata_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_adls_axiomstandardatalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('lnk_adls_axiomstandardatalake_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_sevnt_axiomstorage4inbounddata_inbounddatafiles')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_transaction_data_files",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/inbounddatafiles/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trg_sevnt_axiomstorage4inbounddata_inbounddatafiles_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ingest_transaction_data_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_insert_raw_data_into_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Delta"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_parquet_transaction_data_file",
								"type": "DatasetReference"
							},
							"name": "SRCParquetRawTransactions"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "lnk_adls_axiomstandardatalake",
								"type": "LinkedServiceReference"
							},
							"name": "DSTStagingParquetRawTransactions"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SRCParquetRawTransactions",
						"SRCParquetRawTransactions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'textdatafiles',",
						"     folderPath: 'transactions/staging/transaction_data',",
						"     truncate:true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DSTStagingParquetRawTransactions"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_parquet_transaction_data_file')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_adls_axiomstandardatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_update_raw_data_from_data_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Raw Transactions In Delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_update_raw_data_in_delta",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SRCParquetRawTransactionsInDelta": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Delta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_update_raw_data_in_delta')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_update_raw_data_in_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Delta"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_adls_axiomstandardatalake",
								"type": "LinkedServiceReference"
							},
							"name": "SRCParquetRawTransactionsInDelta"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "lnk_adls_axiomstandardatalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SELECTAllCoumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Prop_0 as string,",
						"          Prop_1 as string,",
						"          Prop_2 as string,",
						"          Prop_3 as string,",
						"          Prop_4 as string,",
						"          Prop_5 as string,",
						"          Prop_6 as string,",
						"          Prop_7 as string,",
						"          Prop_8 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'textdatafiles',",
						"     folderPath: 'transactions/staging/transaction_data') ~> SRCParquetRawTransactionsInDelta",
						"SRCParquetRawTransactionsInDelta select(mapColumn(",
						"          date = Prop_0,",
						"          description = Prop_1,",
						"          original_description = Prop_2,",
						"          amount = Prop_3,",
						"          transaction_type = Prop_4,",
						"          category = Prop_5,",
						"          account_name = Prop_6,",
						"          labels = Prop_7,",
						"          notes = Prop_8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SELECTAllCoumns",
						"SELECTAllCoumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'textdatafiles',",
						"     folderPath: 'transactions/staging/transaction_data',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_adls_axiomstandardatalake')]"
			]
		}
	]
}