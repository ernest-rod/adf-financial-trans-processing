{
	"name": "df_update_raw_data_in_delta",
	"properties": {
		"folder": {
			"name": "Delta"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "lnk_adls_axiomstandardatalake",
						"type": "LinkedServiceReference"
					},
					"name": "SRCParquetRawTransactionsInDelta"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "lnk_adls_axiomstandardatalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SELECTAllCoumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          Prop_1 as string,",
				"          Prop_2 as string,",
				"          Prop_3 as string,",
				"          Prop_4 as string,",
				"          Prop_5 as string,",
				"          Prop_6 as string,",
				"          Prop_7 as string,",
				"          Prop_8 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'textdatafiles',",
				"     folderPath: 'transactions/staging/transaction_data') ~> SRCParquetRawTransactionsInDelta",
				"SRCParquetRawTransactionsInDelta select(mapColumn(",
				"          date = Prop_0,",
				"          description = Prop_1,",
				"          original_description = Prop_2,",
				"          amount = Prop_3,",
				"          transaction_type = Prop_4,",
				"          category = Prop_5,",
				"          account_name = Prop_6,",
				"          labels = Prop_7,",
				"          notes = Prop_8",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SELECTAllCoumns",
				"SELECTAllCoumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'textdatafiles',",
				"     folderPath: 'transactions/staging/transaction_data',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}